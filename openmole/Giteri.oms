// Define the variables that are transmitted between the tasks
val one = Val[Double]
val two = Val[Double]
val network = Val[File]
val seed = Val[Long]

val o1 = Val[Double]
val o2 = Val[Double]

// Define the model task that computes an estimation of pi
val model =
  ScalaTask("""
   |val (o1, o2) = giteri.Run.run(network, one, two, seed)
   |""".stripMargin) set (
      inputs += (one, two, network, seed),
      outputs += (o1, o2),
      network := workDirectory / "default.txt"
    )
    
val evolution =
  SteadyStateEvolution(
    algorithm =   
      NSGA2(
        mu = 200,
        genome = Seq(one in (-100.0, 100.0), two in (-100.0, 100.0)),
        objectives = Seq(o1, o2),
        stochastic = Stochastic(seed = seed)
      ),
    evaluation = model,
    parallelism = 1,
    termination = 15 minutes
  )
  
  
// Define the island model with 2,000 concurrent islands.
// The algorithm stops after 200,000 islands evaluations.
val island = IslandEvolution(evolution, parallelism = 1000, termination = 100000)
  
// Define a hook to save the Pareto frontier
val save = SavePopulationHook(island, workDirectory / "calibration")

val env = EGIEnvironment("vo.complex-systems.eu")

(island hook save on env)
